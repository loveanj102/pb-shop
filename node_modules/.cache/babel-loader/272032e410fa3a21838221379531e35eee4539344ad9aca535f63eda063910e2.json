{"ast":null,"code":"import { createContext } from \"react\";\nexport const initState = {\n  //初始化狀態\n  type: '',\n  title: '',\n  text: ''\n};\n\n//useContext 跨元件傳遞\nexport const MessageContext = /*#__PURE__*/createContext({});\n\n//Reducer (有一些方法，建立訊息＆刪除訊息)\nexport const messageReducer = (state, action) => {\n  //state 狀態＆action使用的方法\n  switch (action.type) {\n    case \"POST_MESSAGE\":\n      return {\n        ...action.payload\n      };\n    case \"CLEAR_MESSAGE\":\n      return {\n        ...initState\n      };\n    default:\n      return state;\n  }\n};\nexport function handleSuccessMessage(dispatch, res) {\n  dispatch({\n    type: \"POST_MESSAGE\",\n    payload: {\n      type: 'success',\n      title: '更新成功',\n      text: res.data.message\n    }\n  });\n  setTimeout(() => {\n    dispatch({\n      type: \"CLEAR_MESSAGE\"\n    });\n  }, 3000);\n}\nexport function handleErrorMessage(dispatch, error) {\n  var _error$response, _error$response$data, _error$response2, _error$response2$data, _error$response3, _error$response3$data;\n  dispatch({\n    type: \"POST_MESSAGE\",\n    payload: {\n      type: 'danger',\n      title: '更新失敗',\n      text: Array.isArray(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) ? error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message.join(`&`) //如果是陣列就改成字串形式呈現\n      : error === null || error === void 0 ? void 0 : (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message\n    }\n  });\n  setTimeout(() => {\n    dispatch({\n      type: \"CLEAR_MESSAGE\"\n    });\n  }, 3000);\n}","map":{"version":3,"names":["createContext","initState","type","title","text","MessageContext","messageReducer","state","action","payload","handleSuccessMessage","dispatch","res","data","message","setTimeout","handleErrorMessage","error","_error$response","_error$response$data","_error$response2","_error$response2$data","_error$response3","_error$response3$data","Array","isArray","response","join"],"sources":["/Users/nikki.kang/Desktop/Nikki/website/pb-shop/src/store/MessageStore.js"],"sourcesContent":["import { createContext } from \"react\";\n\nexport const initState = { //初始化狀態\n    type: '',\n    title: '',\n    text: '',\n}\n\n//useContext 跨元件傳遞\nexport const MessageContext = createContext({})\n\n\n//Reducer (有一些方法，建立訊息＆刪除訊息)\nexport const messageReducer = (state, action) => { //state 狀態＆action使用的方法\n    switch (action.type) {\n        case \"POST_MESSAGE\":\n            return {\n                ...action.payload\n            };\n        case \"CLEAR_MESSAGE\":\n            return {\n                ...initState,\n            };\n        default:\n            return state;\n    }\n}\n\nexport function handleSuccessMessage(dispatch, res) {\n    dispatch({\n        type: \"POST_MESSAGE\",\n        payload: {\n            type: 'success',\n            title: '更新成功',\n            text: res.data.message,\n        },\n    });\n    setTimeout(() => {\n        dispatch({\n            type: \"CLEAR_MESSAGE\",\n        });\n    }, 3000);\n}\n\nexport function handleErrorMessage(dispatch, error) {\n    dispatch({\n        type: \"POST_MESSAGE\",\n        payload: {\n            type: 'danger',\n            title: '更新失敗',\n            text: Array.isArray(error?.response?.data?.message)\n                ? error?.response?.data?.message.join(`&`) //如果是陣列就改成字串形式呈現\n                : error?.response?.data?.message,\n        },\n    });\n    setTimeout(() => {\n        dispatch({\n            type: \"CLEAR_MESSAGE\",\n        });\n    }, 3000);\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,OAAO;AAErC,OAAO,MAAMC,SAAS,GAAG;EAAE;EACvBC,IAAI,EAAE,EAAE;EACRC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE;AACV,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,gBAAGL,aAAa,CAAC,CAAC,CAAC,CAAC;;AAG/C;AACA,OAAO,MAAMM,cAAc,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAAE;EAC/C,QAAQA,MAAM,CAACN,IAAI;IACf,KAAK,cAAc;MACf,OAAO;QACH,GAAGM,MAAM,CAACC;MACd,CAAC;IACL,KAAK,eAAe;MAChB,OAAO;QACH,GAAGR;MACP,CAAC;IACL;MACI,OAAOM,KAAK;EACpB;AACJ,CAAC;AAED,OAAO,SAASG,oBAAoBA,CAACC,QAAQ,EAAEC,GAAG,EAAE;EAChDD,QAAQ,CAAC;IACLT,IAAI,EAAE,cAAc;IACpBO,OAAO,EAAE;MACLP,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,MAAM;MACbC,IAAI,EAAEQ,GAAG,CAACC,IAAI,CAACC;IACnB;EACJ,CAAC,CAAC;EACFC,UAAU,CAAC,MAAM;IACbJ,QAAQ,CAAC;MACLT,IAAI,EAAE;IACV,CAAC,CAAC;EACN,CAAC,EAAE,IAAI,CAAC;AACZ;AAEA,OAAO,SAASc,kBAAkBA,CAACL,QAAQ,EAAEM,KAAK,EAAE;EAAA,IAAAC,eAAA,EAAAC,oBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;EAChDZ,QAAQ,CAAC;IACLT,IAAI,EAAE,cAAc;IACpBO,OAAO,EAAE;MACLP,IAAI,EAAE,QAAQ;MACdC,KAAK,EAAE,MAAM;MACbC,IAAI,EAAEoB,KAAK,CAACC,OAAO,CAACR,KAAK,aAALA,KAAK,wBAAAC,eAAA,GAALD,KAAK,CAAES,QAAQ,cAAAR,eAAA,wBAAAC,oBAAA,GAAfD,eAAA,CAAiBL,IAAI,cAAAM,oBAAA,uBAArBA,oBAAA,CAAuBL,OAAO,CAAC,GAC7CG,KAAK,aAALA,KAAK,wBAAAG,gBAAA,GAALH,KAAK,CAAES,QAAQ,cAAAN,gBAAA,wBAAAC,qBAAA,GAAfD,gBAAA,CAAiBP,IAAI,cAAAQ,qBAAA,uBAArBA,qBAAA,CAAuBP,OAAO,CAACa,IAAI,CAAE,GAAE,CAAC,CAAC;MAAA,EACzCV,KAAK,aAALA,KAAK,wBAAAK,gBAAA,GAALL,KAAK,CAAES,QAAQ,cAAAJ,gBAAA,wBAAAC,qBAAA,GAAfD,gBAAA,CAAiBT,IAAI,cAAAU,qBAAA,uBAArBA,qBAAA,CAAuBT;IACjC;EACJ,CAAC,CAAC;EACFC,UAAU,CAAC,MAAM;IACbJ,QAAQ,CAAC;MACLT,IAAI,EAAE;IACV,CAAC,CAAC;EACN,CAAC,EAAE,IAAI,CAAC;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}